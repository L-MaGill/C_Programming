1. mkdir <directory_name> (make directory)
2. cd <directory_name> (change directory) changes the directory to the specified one.
3. code <file_name>. creates the file and opens it in a text editor.
4. ls (list). Shows the content of the current directory.
5. pwd (print working directory). Shows the path of the current directory.
6. clear - Clears the terminal window.
7. gcc <file_name (c source code)> - compile the program.
8. ./a.out <executable_file> - runs the program.
9. \ - escape
10. \* - escape sequence
11. // one line comment
12. /* multiline comment

comments document programs and are ignored by the computer. Theyre used to communicate with your team.
C ignores empty lines. you could do as many lines as you want or put them all on one line ( not reccommended)

lines beginning with # are processed before other lines.
int main(void) the void in the parathese means the main does not recieve any information. This is the same as leaving the parenthese empty.

{} represents the start and the end of the block
printf() instructs the computer to preform an action. in this case, it tells the computer to print the string of characters marked by quotation marks

\ escape character

\n means new line

%d conversion specializer

All variables must be defined with a name and a data type before they can be used as a program

variable name:
-variable names consist of letters, digits and underscores
-they may not begin with a digit (its better to start with lower case)
-should be meaningful
-shouldn't be a keyword

split multiple word variable names with underscores (ex. total_commission)
- C is case sensitive. A is not the same as A

write a C program that produces the following console output. 
Name: John Doe 
Course ID: 2271
Student ID: 10234
Student ID - Course ID is: 7963

sum = interger1 + interger2; // assign sum to total 

1. git status <check the status of your files>
2. git add <stage the changes you want to make>
3. git commit -m "" <Commit your changes with a meaningful message>
4. git push origin main <push your changes>


scanf( "%d", &interger1 ); // read an interger
puts("Enter the number:"); <the same as printf()>

int age = 10,
age = 100
int new_age = age + 5;
%d
%c hello %c = "hello"
scanf("%d", &age);

\"%d\" <quotations>

interger division will only give intergers <ex. 7/4 = 1>

% yields the remainder after division <ex. 5/2 = 2>

e or E Display a floating point value in exponential notation

f or F Display a floating point in floating notation

printf("%.3f\n", 123.456789); -> 123.457
printf("%.2f\n", 123.456789); -> 123.46
printf("%.1f\n", 123.456789); -> 123.5

char grade = 'A';
or
char grade = 65;

conversion specializer %c is used to display character type

if(booleanExpression<condition>)
{statement(s) - for the true case;
}
else
{
    statement(s) - for the false case;
}

You can have more than one else statements

Sentinel Controlled Loop

initialization
while(condition) {
    statemnet(s);
    increments;
}

++a: Increment a by 1 then use the new value of a in the expression
a++: Use the current value of a in the expression and then increment by 1
--b: decrement b by 1 then use the new value in the expression
b--: Use the current value of b in the expression and then increment by 1

x=4
y=0
z=0
k=2

y+= x++ +1
z-= 7 +2;
k*= --z


x = 5
y = 6
z = -9
k = -18




int x = 1;
int sum = 0;

do{
    sum += x;
    x++;
} while(x<=10);


For Loop:
           1             2           4
for (initialization; condition; increment) {
    statement(s)
}

write a for statement that prints:
20, 14, 8, 2, -4, -10


n = a + rand() % b; 

b is the scaling factor which determines the range. The range is equal to [0, b-1]

rand() % (b-a + 1) + A

boooooooooooooo

rand() % 31 - 7

<data type> * name = NULL;
                   = &smth;
**Data type of variable and smth need to match

printf("%d", *yPtr);

void sp(int *a_ptr, int*b_ptr) {
    int temp = *a_ptr;
    *a_ptr = *b_ptr;
    *b_ptr = temp;
}

array is from 0 to n-1

<data type> name[size];

ex: int grades[10]; => would produce 10 numbers 

printf("%d", grades[0]);